*filter

# Clear all iptables rules (everything is open)
-X
-F
-Z

# Allow loopback interface (lo0) and drop all traffic to 127/8 that doesn't use lo0
-A INPUT -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT
-A INPUT -d 127.0.0.0/8 -j REJECT
-A OUTPUT -d 127.0.0.0/8 -j REJECT

# Keep all established connections
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

# Allow ping
-A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
-A INPUT -p icmp --icmp-type echo-reply -j ACCEPT
-A INPUT -p icmp --icmp-type echo-request -j ACCEPT
-A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT

{% if iptables_enable_ping_of_death_protection %}
# Protect from ping of death
-N PING_OF_DEATH
-A PING_OF_DEATH -p icmp --icmp-type echo-request -m hashlimit --hashlimit 1/s --hashlimit-burst 10 --hashlimit-htable-expire 300000 --hashlimit-mode srcip --hashlimit-name t_PING_OF_DEATH -j RETURN
-A PING_OF_DEATH -j DROP
-A INPUT -p icmp --icmp-type echo-request -j PING_OF_DEATH
{% endif %}

{% if iptables_enable_port_scan_protection %}
# Prevent port scanning
-N PORTSCAN
-A PORTSCAN -p tcp --tcp-flags ACK,FIN FIN -j DROP
-A PORTSCAN -p tcp --tcp-flags ACK,PSH PSH -j DROP
-A PORTSCAN -p tcp --tcp-flags ACK,URG URG -j DROP
-A PORTSCAN -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
-A PORTSCAN -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
-A PORTSCAN -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
-A PORTSCAN -p tcp --tcp-flags ALL ALL -j DROP
-A PORTSCAN -p tcp --tcp-flags ALL NONE -j DROP
-A PORTSCAN -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
-A PORTSCAN -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
-A PORTSCAN -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
{% endif %}

{% if iptables_drop_fragmented_packages %}
# Drop fragmented packages
-A INPUT -f -j DROP
{% endif %}

{% if iptables_force_syn_packets_check %}
# SYN packets check
-A INPUT -p tcp ! --syn -m state --state NEW -j DROP
{% endif %}

{% if iptables_outgoing_udp_ports|length > 0 %}
# Open ports for outgoing UDP traffic
{% for port in iptables_outgoing_udp_ports %}
-A INPUT -p udp --sport {{ port }} -j ACCEPT
-A OUTPUT -p udp --dport {{ port }} -j ACCEPT
{% endfor %}
{% endif %}

{% if iptables_incoming_udp_ports|length > 0 %}
# Open ports for incoming UDP traffic
{% for port in iptables_incoming_udp_ports %}
-A INPUT -p udp --dport {{ port }} -j ACCEPT
-A OUTPUT -p udp --sport {{ port }} -j ACCEPT
{% endfor %}
{% endif %}

{% if iptables_incoming_tcp_ports|length > 0 %}
# Open TCP ports for incoming traffic
{% for port in iptables_incoming_tcp_ports %}
-A INPUT -p tcp --dport {{ port }} -m state --state NEW,ESTABLISHED -j ACCEPT
-A OUTPUT -p tcp --sport {{ port }} -m state --state ESTABLISHED -j ACCEPT
{% endfor %}
{% endif %}

{% if iptables_outgoing_tcp_ports|length > 0 %}
# Open TCP ports for outgoing traffic
{% for port in iptables_outgoing_tcp_ports %}
-A INPUT -p tcp --sport {{ port }} -m state --state ESTABLISHED -j ACCEPT
-A OUTPUT -p tcp --dport {{ port }} -m state --state NEW,ESTABLISHED -j ACCEPT
{% endfor %}
{% endif %}

{% if iptables_extra_rules|length > 0 %}
# Additonal rules
{% for rule in iptables_extra_rules %}
{{ rule }}
{% endfor %}
{% endif %}

# Drop all other traffic
-A INPUT -j DROP
-A FORWARD -j DROP
-A OUTPUT -j DROP

COMMIT
